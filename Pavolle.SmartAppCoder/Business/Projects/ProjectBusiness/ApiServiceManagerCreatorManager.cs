using Pavolle.SmartAppCoder.Common.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Pavolle.SmartAppCoder.Business.Projects.ProjectBusiness
{
    internal class ApiServiceManagerCreatorManager : Singleton<ApiServiceManagerCreatorManager>
    {
        private ApiServiceManagerCreatorManager() { }

        public bool Create(string organizationName, string projectName, string projectPath, string language)
        {
            if (language == null) language = "en, tr";
            string[] _languages = language.Split(',');
            string projectNameRoot = organizationName + "." + projectName;
            string classString = "";
            classString += "using DevExpress.Xpo;" + Environment.NewLine;
            classString += "using log4net;" + Environment.NewLine;
            classString += "using " + organizationName + ".Core.Enums;" + Environment.NewLine;
            classString += "using " + organizationName + ".Core.Utils;" + Environment.NewLine;
            classString += "using " + projectNameRoot + ".Common.Enums;" + Environment.NewLine;
            classString += "using " + projectNameRoot + ".DbModels;" + Environment.NewLine;
            classString += "using " + projectNameRoot + ".DbModels.Entities;" + Environment.NewLine;
            classString += "using " + projectNameRoot + ".DbModels.Manager;" + Environment.NewLine;
            classString += "using " + projectNameRoot + ".ViewModels.Criteria;" + Environment.NewLine;
            classString += "using " + projectNameRoot + ".ViewModels.Model;" + Environment.NewLine;
            classString += "using " + projectNameRoot + ".ViewModels.Request;" + Environment.NewLine;
            classString += "using " + projectNameRoot + ".ViewModels.Response;" + Environment.NewLine;
            classString += "using " + projectNameRoot + ".ViewModels.ViewData;" + Environment.NewLine;
            classString += "using System.Linq;" + Environment.NewLine;
            classString += "using System;" + Environment.NewLine;
            classString += "using System.Collections.Concurrent;" + Environment.NewLine;
            classString += "using System.Collections.Generic;" + Environment.NewLine;
            classString += "using System.Text;" + Environment.NewLine;
            classString += "using System.Threading.Tasks;" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "namespace " + projectNameRoot + ".Business.Manager" + Environment.NewLine;
            classString += "{" + Environment.NewLine;
            classString += "    public class ApiServiceManager : Singleton<ApiServiceManager>" + Environment.NewLine;
            classString += "    {" + Environment.NewLine;
            classString += "        static readonly ILog _log = LogManager.GetLogger(typeof(ApiServiceManager));" + Environment.NewLine;
            classString += "        private ApiServiceManager()" + Environment.NewLine;
            classString += "        {" + Environment.NewLine;
            classString += "            _log.Debug(\"Inialize \" + nameof(ApiServiceManager));" + Environment.NewLine;
            classString += "        }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "        public ApiServiceListResponse List(ListApiServiceCriteria criteria)" + Environment.NewLine;
            classString += "        {" + Environment.NewLine;
            classString += "            var response=new ApiServiceListResponse();" + Environment.NewLine;
            classString += "            try" + Environment.NewLine;
            classString += "            {" + Environment.NewLine;
            classString += "                if (criteria == null)" + Environment.NewLine;
            classString += "                {" + Environment.NewLine;
            classString += "                    response.ErrorMessage = TranslateManager.Instance.GetMessage(EMessageCode.SecurityError, SettingManager.Instance.GetDefaultLanguage());" + Environment.NewLine;
            classString += "                    _log.Error(\"Criteria is null\");" + Environment.NewLine;
            classString += "                    return response;" + Environment.NewLine;
            classString += "                }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                if (criteria.Language == null)" + Environment.NewLine;
            classString += "                {" + Environment.NewLine;
            classString += "                    _log.Warn(\"Request language is null. Setted default language.\");" + Environment.NewLine;
            classString += "                    criteria.Language = SettingManager.Instance.GetDefaultLanguage();" + Environment.NewLine;
            classString += "                }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                using (Session session = XpoManager.Instance.GetNewSession())" + Environment.NewLine;
            classString += "                {" + Environment.NewLine;
            classString += "                    IQueryable<ApiService> query = session.Query<ApiService>();" + Environment.NewLine;
            classString += "                    if (!string.IsNullOrEmpty(criteria.ApiKeyContains))" + Environment.NewLine;
            classString += "                    {" + Environment.NewLine;
            classString += "                        query = query.Where(t => t.ApiKey.Contains(criteria.ApiKeyContains));" + Environment.NewLine;
            classString += "                    }" + Environment.NewLine;
            classString += "                    if (!string.IsNullOrEmpty(criteria.DefinitionContains))" + Environment.NewLine;
            classString += "                    {" + Environment.NewLine;
            classString += "                        query = query.Where(t => t.ApiDefinition.Contains(criteria.DefinitionContains));" + Environment.NewLine;
            classString += "                    }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                    response.DataList = query.Select(t => new ApiServiceViewData" + Environment.NewLine;
            classString += "                    {" + Environment.NewLine;
            classString += "                        Oid = t.Oid," + Environment.NewLine;
            classString += "                        CreatedTime = t.CreatedTime," + Environment.NewLine;
            classString += "                        LastUpdateTime = t.LastUpdateTime," + Environment.NewLine;
            classString += "                        ApiKey = t.ApiKey," + Environment.NewLine;
            classString += "                        ApiDefinition = t.ApiDefinition," + Environment.NewLine;
            classString += "                        MethodType = t.MethodType," + Environment.NewLine;
            classString += "                        EditableForAdmin = t.EditableForAdmin," + Environment.NewLine;
            classString += "                        EditableForOrganization = t.EditableForOrganization," + Environment.NewLine;
            classString += "                        Anonymous = t.Anonymous" + Environment.NewLine;
            classString += "                    }).ToList();" + Environment.NewLine;
            classString += "                }" + Environment.NewLine;
            classString += "            }" + Environment.NewLine;
            classString += "            catch (Exception ex)" + Environment.NewLine;
            classString += "            {" + Environment.NewLine;
            classString += "                response.ErrorMessage = TranslateManager.Instance.GetMessage(EMessageCode.UnexpectedError, criteria.Language.Value);\r\n                _log.Debug(\"Unexpected error occured!!! Error: \" + ex);" + Environment.NewLine;
            classString += "            }" + Environment.NewLine;
            classString += "            return response;" + Environment.NewLine;
            classString += "        }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "        public ApiServiceDetailResponse Detail(long? oid, MessageServiceRequestBase request)" + Environment.NewLine;
            classString += "        {" + Environment.NewLine;
            classString += "            var response = new ApiServiceDetailResponse();" + Environment.NewLine;
            classString += "            try" + Environment.NewLine;
            classString += "            {" + Environment.NewLine;
            classString += "                if (request == null)" + Environment.NewLine;
            classString += "                {" + Environment.NewLine;
            classString += "                    response.ErrorMessage = TranslateManager.Instance.GetMessage(EMessageCode.SecurityError, SettingManager.Instance.GetDefaultLanguage());" + Environment.NewLine;
            classString += "                    _log.Error(\"Request is null\");" + Environment.NewLine;
            classString += "                    return response;" + Environment.NewLine;
            classString += "                }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                if (request.Language == null)" + Environment.NewLine;
            classString += "                {" + Environment.NewLine;
            classString += "                    _log.Warn(\"Request language is null. Setted default language.\");" + Environment.NewLine;
            classString += "                    request.Language = SettingManager.Instance.GetDefaultLanguage();" + Environment.NewLine;
            classString += "                }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                using (Session session = XpoManager.Instance.GetNewSession())" + Environment.NewLine;
            classString += "                {" + Environment.NewLine;
            classString += "                    var data = session.Query<ApiService>().Where(t => t.Oid == oid).FirstOrDefault();" + Environment.NewLine;
            classString += "                    if (data == null)" + Environment.NewLine;
            classString += "                    {" + Environment.NewLine;
            classString += "                        response.ErrorMessage = TranslateManager.Instance.GetXNotFoundMessage(request.Language.Value, EMessageCode.ApiService);" + Environment.NewLine;
            classString += "                    }" + Environment.NewLine;
            classString += "                    else" + Environment.NewLine;
            classString += "                    {" + Environment.NewLine;
            classString += "                        response.Detail = new ApiServiceDetailViewData" + Environment.NewLine;
            classString += "                        {" + Environment.NewLine;
            classString += "                            Oid = data.Oid," + Environment.NewLine;
            classString += "                            CreatedTime = data.CreatedTime," + Environment.NewLine;
            classString += "                            LastUpdateTime = data.LastUpdateTime," + Environment.NewLine;
            classString += "                            ApiKey = data.ApiKey," + Environment.NewLine;
            classString += "                            ApiDefinition = data.ApiDefinition," + Environment.NewLine;
            classString += "                            MethodType = data.MethodType," + Environment.NewLine;
            classString += "                            EditableForAdmin = data.EditableForAdmin," + Environment.NewLine;
            classString += "                            EditableForOrganization = data.EditableForOrganization," + Environment.NewLine;
            classString += "                            Anonymous = data.Anonymous" + Environment.NewLine;
            classString += "                        };" + Environment.NewLine;
            classString += "                        response.Authorization = AuthManager.Instance.GetAuthListForApi(data.Oid);" + Environment.NewLine;
            classString += "                    }" + Environment.NewLine;
            classString += "                }" + Environment.NewLine;
            classString += "            }" + Environment.NewLine;
            classString += "            catch (Exception ex)" + Environment.NewLine;
            classString += "            {" + Environment.NewLine;
            classString += "                response.ErrorMessage = TranslateManager.Instance.GetMessage(EMessageCode.UnexpectedError, request.Language.Value);" + Environment.NewLine;
            classString += "                _log.Debug(\"Unexpected error occured!!! Error: \" + ex);" + Environment.NewLine;
            classString += "            }" + Environment.NewLine;
            classString += "            return response;" + Environment.NewLine;
            classString += "        }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "        public MessageServiceResponseBase Edit(long? oid, EditApiServiceRequest request)" + Environment.NewLine;
            classString += "        {" + Environment.NewLine;
            classString += "            var response = new ApiServiceDetailResponse();" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "            try" + Environment.NewLine;
            classString += "            {" + Environment.NewLine;
            classString += "                if (request == null)" + Environment.NewLine;
            classString += "                {" + Environment.NewLine;
            classString += "                    response.ErrorMessage = TranslateManager.Instance.GetMessage(EMessageCode.SecurityError, SettingManager.Instance.GetDefaultLanguage());" + Environment.NewLine;
            classString += "                    _log.Error(\"Request is null\");" + Environment.NewLine;
            classString += "                    return response;" + Environment.NewLine;
            classString += "                }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                if (request.Language == null)" + Environment.NewLine;
            classString += "                {" + Environment.NewLine;
            classString += "                    _log.Warn(\"Request language is null. Setted default language.\");" + Environment.NewLine;
            classString += "                    request.Language = SettingManager.Instance.GetDefaultLanguage();" + Environment.NewLine;
            classString += "                }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                string? checkResult = ValidationManager.Instance.CheckString(request.ApiDefinition, false, 5, 255, true, EMessageCode.ApiDefinition, request.Language.Value);" + Environment.NewLine;
            classString += "                if (checkResult != null)" + Environment.NewLine;
            classString += "                {" + Environment.NewLine;
            classString += "                    _log.Error(\"Request Validation Error: \" + checkResult);" + Environment.NewLine;
            classString += "                    response.ErrorMessage = checkResult;" + Environment.NewLine;
            classString += "                    return response;" + Environment.NewLine;
            classString += "                }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                checkResult = ValidationManager.Instance.CheckForNull(request.Auhtorizations, EMessageCode.Auhtorizations, request.Language.Value);" + Environment.NewLine;
            classString += "                if (checkResult != null)" + Environment.NewLine;
            classString += "                {" + Environment.NewLine;
            classString += "                    _log.Error(\"Request Validation Error: \" + checkResult);" + Environment.NewLine;
            classString += "                    response.ErrorMessage = checkResult;" + Environment.NewLine;
            classString += "                    return response;" + Environment.NewLine;
            classString += "                }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                using (Session session = XpoManager.Instance.GetNewSession())" + Environment.NewLine;
            classString += "                {" + Environment.NewLine;
            classString += "                    var data = session.Query<ApiService>().FirstOrDefault(t => t.Oid == oid);" + Environment.NewLine;
            classString += "                    if (data == null)" + Environment.NewLine;
            classString += "                    {" + Environment.NewLine;
            classString += "                        response.ErrorMessage = TranslateManager.Instance.GetXNotFoundMessage(request.Language.Value, EMessageCode.ApiService);" + Environment.NewLine;
            classString += "                        return response;" + Environment.NewLine;
            classString += "                    }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                    if(data.Anonymous)" + Environment.NewLine;
            classString += "                    {" + Environment.NewLine;
            classString += "                        response.ErrorMessage = TranslateManager.Instance.GetXCanNotBeChanged(request.Language.Value, EMessageCode.ApiService);" + Environment.NewLine;
            classString += "                        return response;" + Environment.NewLine;
            classString += "                    }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                    if (request.UserType == EUserType.SystemAdmin)" + Environment.NewLine;
            classString += "                    {" + Environment.NewLine;
            classString += "                        if (!data.EditableForAdmin)" + Environment.NewLine;
            classString += "                        {" + Environment.NewLine;
            classString += "                            response.ErrorMessage = TranslateManager.Instance.GetXCanNotBeChanged(request.Language.Value, EMessageCode.ApiService);" + Environment.NewLine;
            classString += "                            return response;" + Environment.NewLine;
            classString += "                        }" + Environment.NewLine;
            classString += "                    }" + Environment.NewLine;
            classString += "                    else" + Environment.NewLine;
            classString += "                    {" + Environment.NewLine;
            classString += "                        if(!data.EditableForOrganization)" + Environment.NewLine;
            classString += "                        {" + Environment.NewLine;
            classString += "                            response.ErrorMessage = TranslateManager.Instance.GetXCanNotBeChanged(request.Language.Value, EMessageCode.ApiService);" + Environment.NewLine;
            classString += "                            return response;" + Environment.NewLine;
            classString += "                        }" + Environment.NewLine;
            classString += "                    }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                    session.BeginTransaction();" + Environment.NewLine;
            classString += "                    data.ApiDefinition = request.ApiDefinition;" + Environment.NewLine;
            classString += "                    data.LastUpdateTime = DateTime.Now;" + Environment.NewLine;
            classString += "                    data.Save();" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                    foreach (var auth in request.Auhtorizations)" + Environment.NewLine;
            classString += "                    {" + Environment.NewLine;
            classString += "                        var dbAuthData = session.Query<Auth>().FirstOrDefault(t => t.UserGroup.Oid == auth.UserGroupOid && t.ApiService.Oid == oid);" + Environment.NewLine;
            classString += "                        if(dbAuthData == null)" + Environment.NewLine;
            classString += "                        {" + Environment.NewLine;
            classString += "                            var userGroup = session.Query<UserGroup>().FirstOrDefault(t => t.Oid == auth.UserGroupOid);" + Environment.NewLine;
            classString += "                            new Auth(session)" + Environment.NewLine;
            classString += "                            {" + Environment.NewLine;
            classString += "                                UserGroup = userGroup," + Environment.NewLine;
            classString += "                                ApiService = data," + Environment.NewLine;
            classString += "                                IsAuhtority = auth.IsAuthority" + Environment.NewLine;
            classString += "                            }.Save();" + Environment.NewLine;
            classString += "                        }" + Environment.NewLine;
            classString += "                        else" + Environment.NewLine;
            classString += "                        {" + Environment.NewLine;
            classString += "                            if (dbAuthData.IsAuhtority != auth.IsAuthority)" + Environment.NewLine;
            classString += "                            {" + Environment.NewLine;
            classString += "                                dbAuthData.IsAuhtority = auth.IsAuthority;" + Environment.NewLine;
            classString += "                                dbAuthData.LastUpdateTime = DateTime.Now;" + Environment.NewLine;
            classString += "                                dbAuthData.Save();" + Environment.NewLine;
            classString += "                            }" + Environment.NewLine;
            classString += "                        }" + Environment.NewLine;
            classString += "                    }" + Environment.NewLine;
            classString += "" + Environment.NewLine;
            classString += "                    session.CommitTransaction();" + Environment.NewLine;
            classString += "                    response.SuccessMessage = TranslateManager.Instance.GetXSavedMessage(request.Language.Value, EMessageCode.ApiService);" + Environment.NewLine;
            classString += "                }" + Environment.NewLine;
            classString += "                AuthManager.Instance.Initialize();" + Environment.NewLine;
            classString += "            }" + Environment.NewLine;
            classString += "            catch (Exception ex)" + Environment.NewLine;
            classString += "            {" + Environment.NewLine;
            classString += "                response.ErrorMessage = TranslateManager.Instance.GetMessage(EMessageCode.UnexpectedError, request.Language.Value);" + Environment.NewLine;
            classString += "                _log.Debug(\"Unexpected error occured!!! Error: \" + ex);" + Environment.NewLine;
            classString += "            }" + Environment.NewLine;
            classString += "            return response;" + Environment.NewLine;
            classString += "        }" + Environment.NewLine;
            classString += "    }" + Environment.NewLine;
            classString += "}" + Environment.NewLine;


            return FileHelperManager.Instance.WriteFile(projectPath, projectNameRoot + ".Business/Manager", "ApiServiceManager.cs", classString);
        }
    }
}
